

const TaskForm = ({ addTask }) => {
  const [task, setTask] = useState({
    title: '',
    description: '',
    dueDate: '',
    status: 'Pending',
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setTask({ ...task, [name]: value });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    addTask(task);
    setTask({ title: '', description: '', dueDate: '', status: 'Pending' });
  };

  return (
    <form onSubmit={handleSubmit} className="task-form">
      <input
        type="text"
        name="title"
        placeholder="Title"
        value={task.title}
        onChange={handleChange}
        required
      />
      <textarea
        name="description"
        placeholder="Description"
        value={task.description}
        onChange={handleChange}
        required
      />
      <input
        type="date"
        name="dueDate"
        value={task.dueDate}
        onChange={handleChange}
        required
      />
      <select name="status" value={task.status} onChange={handleChange}>
        <option value="Pending">Pending</option>
        <option value="In Progress">In Progress</option>
        <option value="Completed">Completed</option>
      </select>
      <button type="submit">Add Task</button>
    </form>
  );
};

export default TaskForm;


---

b. View Tasks (TaskList.jsx and TaskItem.jsx)

Display tasks as a list or table.

TaskList.jsx:

import React from 'react';
import TaskItem from './TaskItem';

const TaskList = ({ tasks, editTask, deleteTask }) => {
  return (
    <div className="task-list">
      {tasks.map((task, index) => (
        <TaskItem
          key={index}
          task={task}
          editTask={() => editTask(index)}
          deleteTask={() => deleteTask(index)}
        />
      ))}
    </div>
  );
};

export default TaskList;

TaskItem.jsx:

import React from 'react';

const TaskItem = ({ task, editTask, deleteTask }) => {
  return (
    <div className="task-item">
      <h3>{task.title}</h3>
      <p>{task.description}</p>
      <p>Due Date: {task.dueDate}</p>
      <p>Status: {task.status}</p>
      <button onClick={editTask}>Edit</button>
      <button onClick={deleteTask}>Delete</button>
    </div>
  );
};

export default TaskItem;


---

c. Edit Task (EditTaskModal.jsx)

Provide an interface for inline or modal-based editing.

import React, { useState } from 'react';

const EditTaskModal = ({ task, updateTask, closeModal }) => {
  const [updatedTask, setUpdatedTask] = useState(task);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setUpdatedTask({ ...updatedTask, [name]: value });
  };

  const handleSave = () => {
    updateTask(updatedTask);
    closeModal();
  };

  return (
    <div className="modal">
      <input
        type="text"
        name="title"
        value={updatedTask.title}
        onChange={handleChange}
      />
      <textarea
        name="description"
        value={updatedTask.description}
        onChange={handleChange}
      />
      <input
        type="date"
        name="dueDate"
        value={updatedTask.dueDate}
        onChange={handleChange}
      />
      <select name="status" value={updatedTask.status} onChange={handleChange}>
        <option value="Pending">Pending</option>
        <option value="In Progress">In Progress</option>
        <option value="Completed">Completed</option>
      </select>
      <button onClick={handleSave}>Save</button>
      <button onClick={closeModal}>Cancel</button>
    </div>
  );
};

export default EditTaskModal;


---

d. Delete Task

Add a delete button with a confirmation popup.

const handleDelete = (index) => {
  if (window.confirm('Are you sure you want to delete this task?')) {
    setTasks(tasks.filter((_, i) => i !== index));
  }
};


---

4. State Management in App.jsx

Handle task state and integrate all components.

import React, { useState, useEffect } from 'react';
import TaskForm from './components/TaskForm';
import TaskList from './components/TaskList';
import EditTaskModal from './components/EditTaskModal';

const App = () => {
  const [tasks, setTasks] = useState(
    JSON.parse(localStorage.getItem('tasks')) || []
  );
  const [editIndex, setEditIndex] = useState(null);

  useEffect(() => {
    localStorage.setItem('tasks', JSON.stringify(tasks));
  }, [tasks]);

  const addTask = (task) => {
    setTasks([...tasks, task]);
  };

  const editTask = (index) => {
    setEditIndex(index);
  };

  const updateTask = (updatedTask) => {
    const updatedTasks = [...tasks];
    updatedTasks[editIndex] = updatedTask;
    setTasks(updatedTasks);
    setEditIndex(null);
  };

  const deleteTask = (index) => {
    setTasks(tasks.filter((_, i) => i !== index));
  };

  return (
    <div className="app">
      <TaskForm addTask={addTask} />
      <TaskList tasks={tasks} editTask={editTask} deleteTask={deleteTask} />
      {editIndex !== null && (
        <EditTaskModal
          task={tasks[editIndex]}
          updateTask={updateTask}
          closeModal={() => setEditIndex(null)}
        />
      )}
    </div>
  );
};

export default App;


---

5. Styling (styles.css)

Add responsive styles to make the app user-friendly.

body {
  font-family: Arial, sans-serif;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}
.task-form, .task-item {
  margin: 20px;
  padding: 10px;
  border: 1px solid #ccc;
}
.task-list {
  display: flex;
  flex-wrap: wrap;
  gap: 20px;
}
.modal {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background: white;
  padding: 20px;
  border: 1px solid #ccc;
}


